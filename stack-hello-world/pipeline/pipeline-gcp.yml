# YAML anchors
shared:
  - &task-merge-stack-and-config
    task: merge-stack-and-config
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: latest
      run:
        path: /usr/bin/merge-stack-and-config
      inputs:
        - name: git_config
          path: "config"
        - name: git_stack
          path: "stack"
      outputs:
        - name: merged-stack/terraform
          path: "merged-stack"
    params:
      CONFIG_PATH: ((project))/terraform/((env))
      STACK_PATH: terraform-gcp

groups:
  - name: all
    jobs:
    - build
    - unittest
    - terraform-plan
    - terraform-apply
    - functional-tests
  - name: destroy
    jobs:
    - terraform-destroy

resource_types:
  - name: terraform
    type: docker-image
    source:
      repository: ljfranklin/terraform-resource
      tag: '0.11.14'

  - name: gcs-resource
    type: docker-image
    source:
      repository: frodenas/gcs-resource

resources:
  - name: git_code
    type: git
    source:
      uri: https://github.com/cycloid-community-catalog/stack-hello-world
      branch: code-gcp

  - name: git_stack
    type: git
    source:
      uri: https://github.com/cycloid-community-catalog/stack-hello-world
      branch: ag-gcp
      paths:
        - terraform-gcp/*

  - name: git_config
    type: git
    source:
      uri: ((config_git_repository))
      branch: ((config_git_branch))
      private_key: ((config_git_private_key))

  - name: gcs_release
    type: gcs-resource
    source:
      bucket: ((terraform_storage_bucket_name))
      json_key: ((gcp_credentials))
      #regexp: ((project))/((env))/hello-world-(.*).zip
      versioned_file: ((release_bucket_object_path))

  - name: tfstate
    type: terraform
    source:
      env_name: ((env))
      backend_type: gcs
      backend_config:
        bucket: ((terraform_storage_bucket_name))
        prefix: terraform/state
        region: ((gcp_default_region))
        credentials: ((gcp_credentials))
      vars:
        gcp_credentials: ((gcp_credentials))
        gcp_project: ((gcp_project))
        gcp_region: ((gcp_default_region))
        env: ((env))
        project: ((project))
        customer: ((customer))
        bucket_name: ((terraform_storage_bucket_name))
        bucket_object_path: ((release_bucket_object_path))

jobs:
  - name: build
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_code
        trigger: true

      - task: build-release
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
            - -exc
            - |
              DIR=${PWD}
              cd ${DIR}/code/
              zip -r ${DIR}/release/((project)).zip *
          inputs:
          - name: git_code
            path: code
          outputs:
          - name: release
            path: release

      - put: gcs_release
        params:
          file: release/((project)).zip
          predefined_acl: private

  - name: unittest
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_code
        passed: [build]
      - get: gcs_release
        trigger: true
        passed: [build]

      - task: test
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
            - -exc
            - |
              unzip code/((project)).zip
          inputs:
          - name: gcs_release
            path: code

  - name: terraform-plan
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_code
        passed: [unittest]
      - get: gcs_release
        passed: [unittest]
        trigger: true
      - get: git_stack
        trigger: true
      - get: git_config
        trigger: true
      - *task-merge-stack-and-config
      - put: tfstate
        params:
          env_name: ((env))
          plan_only: true
          terraform_source: merged-stack/terraform

  - name: terraform-apply
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_code
        passed: [terraform-plan]
      - get: gcs_release
        passed: [terraform-plan]
      - get: git_stack
        passed: [terraform-plan]
      - get: tfstate
        passed: [terraform-plan]
      - get: git_config
        passed: [terraform-plan]
      - *task-merge-stack-and-config
      - put: tfstate
        params:
          env_name: ((env))
          plan_run: true
          terraform_source: merged-stack/terraform

  - name: functional-tests
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: tfstate
        passed: [terraform-apply]
        trigger: true
      - task: test
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
            - -exc
            - |
              export FUNCTION_URL=$(cat tfstate/metadata | jq -r .cloudfunctions_function_url)
              STATUS=$(curl -LI $FUNCTION_URL -o /dev/null -w '%{http_code}\n' -s)
              if [ $STATUS != "200" ]; then
                exit 1;
              fi
          inputs:
          - name: tfstate

  - name: terraform-destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_stack
        passed: [terraform-apply]
      - get: tfstate
        passed: [terraform-apply]
      - get: gcs_release
        passed: [terraform-apply]
      - get: git_config
        passed: [terraform-apply]
      - *task-merge-stack-and-config
      - put: tfstate
        params:
          env_name: ((env))
          action: destroy
          terraform_source: merged-stack/terraform
        get_params:
          action: destroy
