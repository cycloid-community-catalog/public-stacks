# YAML anchors
shared:
  - &aws-ami-cleaner
    task: aws-ami-cleaner
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: latest
      run:
        path: /usr/bin/aws-ami-cleaner
      params:
        AWS_ACCESS_KEY_ID: ((aws_access_key))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
        AWS_NAME_PATTERNS: >
                  [
                   "((project))_concourse-server_((env))_"
                  ]

  # Task : connect on vault API with approle and generate a token from it.
  # Also provide some extra vars like external_worker_image for terraform
  - &extract-vars
    task: extract-vars
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: latest
      run:
        path: /usr/bin/vault-approle-login
      outputs:
      - name: extracted-vars
        path: extracted-vars
    params:
      VAULT_ROLEID: ((vault.role_id))
      VAULT_SECRETID: ((vault.secret_id))
      VARS_TF_PATH: extracted-vars/terraform.tfvars

  # Task : sync and merge with rsync 2 rep. Used to merge stack and config
  - &merge-stack-and-config
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: cycloid/cycloid-toolkit
        tag: latest
    run:
      path: /usr/bin/merge-stack-and-config
    outputs:
    - name: merged-stack
      path: "merged-stack"


groups:

- name: overview
  jobs:
  - terraform-plan
  - terraform-apply
  - terraform-destroy
  - build-ami
  - deploy-ami
  - clean-ami

- name: infra
  jobs:
  - terraform-plan
  - terraform-apply

- name: ami
  jobs:
  - build-ami
  - deploy-ami

- name: destroy
  jobs:
  - terraform-destroy

resource_types:

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14

- name: packer
  type: docker-image
  source:
    repository: jdub/packer-resource


resources:

# Terraform by itself
- name: tfstate
  type: terraform
  source:
    storage:
      bucket: ((terraform_storage_bucket_name))
      bucket_path: ((terraform_storage_bucket_path))
      region_name: ((aws_default_region))
      access_key_id: ((aws_access_key))
      secret_access_key: ((aws_secret_key))
    vars:
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
      aws_region: ((aws_default_region))
      env: ((env))
      customer: ((customer))
      project: ((project))
      rds_password: ((rds_password))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_default_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  source:
    uri: https://github.com/cycloid-community-catalog/stack-concourse-server
    branch: ((stack_git_branch))
    paths:
      - terraform/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((project))/terraform/((env))/*

# The Ansible stack (will be merged with the config)
- name: git_stack-ansible
  type: git
  source:
    uri: https://github.com/cycloid-community-catalog/stack-concourse-server
    branch: ((stack_git_branch))
    paths:
      - ansible/*

# The Ansible config (will be merged with the stack)
- name: git_config-ansible
  type: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((project))/ansible/*

# The AMI builder for the concourse servers (for ASG scale-up)
- name: ami_concourse-server
  type: packer
  source:
    aws_access_key_id: ((aws_access_key))
    aws_secret_access_key: ((aws_secret_key))
    region: ((aws_default_region))

jobs:

# Build a new AMI whenever there is a change in Ansible
- name: build-ami
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - do:

    - get: git_stack-ansible
      trigger: true
    - get: git_config-ansible
      trigger: true

    - task: merge-stack-and-config
      config:
        <<: *merge-stack-and-config
        inputs:
        - name: git_config-ansible
          path: "config"
        - name: git_stack-ansible
          path: "stack"
      params:
        CONFIG_PATH: ((config_ansible_path))
        STACK_PATH: ansible
        EXTRA_ANSIBLE_VARS:
          rds_password: ((rds_password))
          concourse_basic_auth_user: ((((concourse_server_creds)).basic_auth_user))
          concourse_basic_auth_password: ((((concourse_server_creds)).basic_auth_password))
          concourse_session_signing_key: ((((concourse_server_creds)).session_signing_key))
          concourse_tsa_host_key: ((((concourse_server_creds)).tsa_host_key))
          vault_role_id: ((((concourse_server_creds)).vault_role_id))
          vault_secret_id: ((((concourse_server_creds)).vault_secret_id))

    - put: ami_concourse-server
      params:
        template: merged-stack/packer/concourse-server/packer_template.json
        env: ((env))
        project: ((project))
        customer: ((customer))
        role: concourse-server
        public_key: ((debug_public_key))
        skip_tags: deploy,notforbuild
        aws_region: ((aws_default_region))
        ansible_version: ((packer_ansible_version))

# Merge and trigger a plan whenever there is a commit in Terraform stack or config
- name: terraform-plan
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: ami_concourse-server
        passed:
          - build-ami
      - get: git_stack-terraform
        trigger: true
      - get: git_config-terraform
        trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: terraform

      - *extract-vars

      - put: tfstate
        params:
          env_name: ((project))-((env))
          plan_only: true
          terraform_source: merged-stack/
          var_files:
              - extracted-vars/terraform.tfvars

# Merge and trigger an apply manually (no autostart of this job)
- name: terraform-apply
  build_logs_to_retain: 10
  plan:
    - do:
      - get: git_stack-terraform
        trigger: false
        passed:
          - terraform-plan
      - get: git_config-terraform
        trigger: false
        passed:
          - terraform-plan
      - get: tfstate
        trigger: false
        passed:
          - terraform-plan

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: terraform

      - *extract-vars

      - put: tfstate
        params:
          env_name: ((project))-((env))
          plan_run: true
          terraform_source: merged-stack/
          var_files:
              - extracted-vars/terraform.tfvars

# Merge and trigger an destroy manually (no autostart of this job)
- name: terraform-destroy
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: git_stack-terraform
        trigger: false
      - get: git_config-terraform
        trigger: false
      - get: tfstate
        trigger: false

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: terraform

      - *extract-vars

      - put: tfstate
        params:
          env_name: ((project))-((env))
          action: destroy
          terraform_source: merged-stack/
          var_files:
            - extracted-vars/terraform.tfvars
        get_params:
          action: destroy

# Merge and trigger an deploy manually (no autostart of this job)
- name: deploy-ami
  build_logs_to_retain: 10
  plan:
    - do:
      - get: ami_concourse-server
        passed:
          - build-ami
        trigger: false

      - get: git_stack-terraform
        trigger: false
        passed:
          - terraform-apply

      - get: git_config-terraform
        trigger: false
        passed:
          - terraform-apply

      - get: tfstate
        trigger: false
        passed:
          - terraform-apply

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: terraform

      - *extract-vars

      - put: tfstate
        params:
          env_name: ((project))-((env))
          plan_run: true
          terraform_source: merged-stack/
          var_files:
              - extracted-vars/terraform.tfvars

- name: clean-ami
  plan:
  - do:
    - get: ami_concourse-server
      passed:
        - deploy-ami
      trigger: true

    - *aws-ami-cleaner
