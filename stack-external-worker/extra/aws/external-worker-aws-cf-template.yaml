---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy external workers pool for Cycloid.io CI Platform.
  Version of Concourse worker is automatically generated by a curl on scheduler_api_address/api/v1/info'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Cycloid - required"
        Parameters:
          - TeamId
          - WorkerKey
      -
        Label:
          default: "Worker - required"
        Parameters:
          - KeyName
          - VpcId
          - Subnets
          - SSHSecurityGroup
          - MetricsSecGroup
      -
        Label:
          default: "On-premises specific (optional on SaaS)"
        Parameters:
          - SchedulerApiAddress
          - SchedulerHost
          - SchedulerPort
          - TsaPublicKey
      -
        Label:
          default: "Worker (optional)"
        Parameters:
          - NumberOfWorkers
          - InstanceSpotPriceEnabled
          - InstanceType
          - ScheduledWorkersEnabled
          - ScheduledWorkersStartRecurrence
          - ScheduledWorkersStopRecurrence
      -
        Label:
          default: "Worker advanced (optional)"
        Parameters:
          - WorkerRuntime
          - WorkerDnsDerver
          - VolumeSize
          - InstanceSpotPrice
          - WorkerVersion
      -
        Label:
          default: "Cycloid advanced (optional)"
        Parameters: 
          - OrganizationTag
          - EnvironmentTag
          - RoleTag
          - StackBranch
          - DebugMode

    ParameterLabels:
      VpcId:
        default: "VPC ID: Which VPC should this be deployed to?"
      TeamId:
        default: "Cycloid CI team ID"
      WorkerKey:
        default: "Cycloid CI worker private key, base64 encoded"
      KeyName:
        default: "KeyName: The instance's AWS EC2 key-pair name"
      Subnets:
        default: "Subnets in the selected VPC for AWS EC2 instances"
      SSHSecurityGroup:
        default: "Allow SSH access from the specified security group"
      MetricsSecGroup:
        default: "Allow metrics (tcp/9100) access from the specified security group "
      NumberOfWorkers:
        default: "How many Cycloid workers would you like to deploy?"
      InstanceSpotPriceEnabled:
        default: "Spot instances: Would you like to use AWS spot instances?"
      InstanceType:
        default: "Type: Which AWS instance type would you like to use?"
      ScheduledWorkersEnabled:
        default: "Start/Stop: would you like to enable an automatic start/stop of workers?"
      ScheduledWorkersStartRecurrence:
        default: "Start time: when should start the workers ? (if enabled)"
      ScheduledWorkersStopRecurrence:
        default: "Stop time: when should stop the workers ? (if enabled)"
      SchedulerApiAddress:
        default: "Scheduler API url: Cycloid CI scheduler http api address (On-premises)"
      SchedulerHost:
        default: "Scheduler API host: Cycloid CI scheduler host address (On-premises)"
      SchedulerPort:
        default: "Scheduler API host: Cycloid CI scheduler host port (On-premises)"
      TsaPublicKey:
        default: "Scheduler TSA public key: Cycloid CI scheduler public key (On-premises)"
Parameters:
  SchedulerApiAddress:
    Description: This url has to be specified if you are not using Cycloid SaaS console.cycloid.io.
    Type: String
    Default: https://scheduler.cycloid.io
  SchedulerHost:
    Description: This address has to be specified if you are not using Cycloid SaaS console.cycloid.io.
    Type: String
    Default: scheduler.cycloid.io
  SchedulerPort:
    Description: This port has to be specified if you are not using Cycloid SaaS console.cycloid.io.
    Type: String
    Default: 32223
  NumberOfWorkers:
    Description: Number of Cycloid CI workers.
    Type: Number
    Default: 1
    ConstraintDescription: Maximum number of workers is 1000.
  VolumeSize:
    Description: Size of the EBS volume for Cycloid CI worker
    Type: Number
    Default: 150
  TeamId:
    Description: This parameter can be obtained by clicking on your profile picture in Cycloid console, then organization settings/Metadata under the ci_team_member field.
    Type: String
    MinLength: 1
  TsaPublicKey:
    Description: This port has to be specified if you are not using Cycloid SaaS console.cycloid.io. Refer to SSH keypair used in concourse_tsa_public_key during on-premises setup.
    Type: String
    Default: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+To6R1hDAO00Xrt8q5Md38J9dh+aMIbV2GTqQkFcKwVAB6czbPPcitPWZ7y3Bw1dKMC8R7DGRAt01yWlkYo/voRp5prqKMc/uzkObhHNy42eJgZlStKU1IMw/fx0Rx+6Y3NClCCOecx415dkAH+PFudKosq4pFB9KjfOp3tMHqirMSF7dsbM3910gcPBL2NFHkOZ4cNfeSztXEg9wy4SExX3CHiUyLiShpwXa+C2f6IPdOJt+9ueXQIL0hcMmd12PRL5UU6/e5U5kldM4EWiJoohVbfoA1CRFF9QwJt6H3IiZPmd3sWqIVVy6Vssn5okjYLRwCwEd8+wd8tI6OnNb"
  WorkerKey:
    Description: You can obtain this key on Cycloid console, under security/credentials section. Looking of a credential named Cycloid-worker-keys, use a base64 encoded version of the the ssh_prv field
    Type: String
    MinLength: 1
  WorkerRuntime:
    Description: Change the default worker container runtimes https://concourse-ci.org/concourse-worker.html#configuring-runtimes
    Type: String
    Default: ""
  WorkerDnsDerver:
    Description: "Override DNS server or add additionals one depending of the container runtime you use. ex '1.1.1.1,8.8.8.8'"
    Type: String
    Default: ""
  InstanceType:
    Description: Worker AWS EC2 instance type
    Type: String
    Default: c5d.xlarge
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5d.large
    - m5d.xlarge
    - m5d.2xlarge
    - m5d.4xlarge
    - m5d.8xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5d.large
    - c5d.xlarge
    - c5d.2xlarge
    - c5d.4xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceSpotPriceEnabled:
    Type: String
    Description: Activate or deactivate spot instances.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    ConstraintDescription: must specify true or false.
  InstanceSpotPrice:
    Description: |
      The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price.
      You can find more information about the pricing here: https://aws.amazon.com/ec2/spot/pricing/.
    Type: String
    Default: "0.5"
    ConstraintDescription: If the InstanceSpotPriceEnabled variable is true, you must specify the maximum hourly price to be paid.
  KeyName:
    Description: Must be the name of an existing EC2 KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1
  SSHSecurityGroup:
    Description: Instances from the specified security group will be allowed to connect using SSH on Cycloid CI workers. Usually you would specify the security group of your bastion server.
    Type: AWS::EC2::SecurityGroup::Id
    MinLength: 1
  MetricsSecGroup:
    Description: Instances from the specified security group will be allowed to read metrics endpoint on Cycloid workers. If you don't have dedicated sec group, simply provide the same as SSHSecurityGroup.
    Type: AWS::EC2::SecurityGroup::Id
    MinLength: 1
#  SSHLocation:
#    Description: The IP address range that can be used to SSH to the EC2 instances
#    Type: String
#    MinLength: '9'
#    MaxLength: '18'
#    Default: 0.0.0.0/0
#    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
#    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Must be the VPC Id of an existing Virtual Private Cloud.
    MinLength: 1
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: They should be residing in the selected Virtual Private Cloud.
    MinLength: 1
  ScheduledWorkersEnabled:
    Type: String
    Description: Activate or deactivate automatic start / stop scheduling. If true, workers will start and stop at specified time defined in ScheduledWorkersStartRecurrence and ScheduledWorkersStopRecurrence.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    ConstraintDescription: must specify true or false.
  ScheduledWorkersStartRecurrence:
    Type: String
    Description: Specifying the recurring StartTime (UTC) for this action, in Unix cron syntax format. For more information about cron syntax, see http://crontab.org/.
    Default: "0 7 * * *"
  ScheduledWorkersStopRecurrence:
    Type: String
    Description: Specifying the recurring EndTime (UTC) for this action, in Unix cron syntax format. For more information about cron syntax, see http://crontab.org/.
    Default: "0 20 * * *"
  OrganizationTag:
    Description: Name of the Cycloid Organization, used as AWS tag
    Type: String
    Default: cycloid
  EnvironmentTag:
    Description: Name of the project's environment, used as AWS tag
    Type: String
    Default: prod
  RoleTag:
    Description: Name for the role, used as AWS tag
    Type: String
    Default: workers
  StackBranch:
    Type: String
    Description: Branch of the external-worker stack to use.
    Default: master
  WorkerVersion:
    Type: String
    Description: Force a specific worker version. Default it will use the version provided by the scheduler API.
    Default: ""
  DebugMode:
    Type: String
    Description: Enable of disable debug mode.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    ConstraintDescription: must specify true or false.

Mappings:
# Generate :
# From https://wiki.debian.org/Cloud/AmazonEC2Image/Buster
# export regions="us-east-1 us-west-2 us-west-1 eu-west-1 eu-west-2 eu-west-3 eu-central-1 ap-northeast-1 ap-northeast-2 ap-northeast-3 ap-southeast-1 ap-southeast-2 ap-south-1 us-east-2 ca-central-1 sa-east-1 cn-north-1 cn-northwest-1"
# for region in $regions; do image=$(aws --region $region ec2 describe-images --owners 136693071363 --filters "Name=name,Values=debian-10-amd64-*" "Name=architecture,Values=x86_64" "Name=virtualization-type,Values=hvm" |  jq -r '.Images[] | "\(.CreationDate) \(.ImageId)"' | sort | awk 'END{print $2}'); echo -e "    $region:\n      image: $image"; done
  AWSRegionArch2AMI:
    us-east-1:
      image: ami-095851f8e69aa9de1
    us-west-2:
      image: ami-070f235fd371de8e4
    us-west-1:
      image: ami-0cf113e60d88599e9
    eu-west-1:
      image: ami-0028c9055f981f26e
    eu-west-2:
      image: ami-0cd9d59327b36aa1c
    eu-west-3:
      image: ami-06eda151b440c72f3
    eu-central-1:
      image: ami-098413c4fa294ef48
    ap-northeast-1:
      image: ami-015832e887d62021b
    ap-northeast-2:
      image: ami-0e26f975b4332d545
    ap-southeast-1:
      image: ami-0c26459b21df3be9d
    ap-southeast-2:
      image: ami-039c5b41949c7a18a
    ap-south-1:
      image: ami-09f8f46d97bffedab
    us-east-2:
      image: ami-094360103fccc58bb
    ca-central-1:
      image: ami-024cbab5c1f8c6c57
    sa-east-1:
      image: ami-0b769a56cdfce0133

Conditions:
  EnabledScheduling: !Equals [!Ref ScheduledWorkersEnabled, 'true']
  EnabledSpotInstances: !Equals [!Ref InstanceSpotPriceEnabled, 'true']
  DisabledSpotInstances: !Equals [!Ref InstanceSpotPriceEnabled, 'false']

Resources:
  WorkersRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Join:
          - '-'
          - - !Ref AWS::StackName
            - !Ref EnvironmentTag
            - 'role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - !Ref EnvironmentTag
                - 'ec2-tags'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "ec2:DescribeTags"
                Resource: "*"
        -
          PolicyName:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - !Ref EnvironmentTag
                - 'cf-signals'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "cloudformation:SignalResource"
                Resource:
                  Ref: AWS::StackId
        -
          PolicyName:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - !Ref EnvironmentTag
                - 'cw-logs-push'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:UntagLogGroup"
                  - "logs:TagLogGroup"
                  - "logs:PutRetentionPolicy"
                  - "logs:PutLogEvents"
                  - "logs:DeleteRetentionPolicy"
                  - "logs:CreateLogStream"
                Resource: "arn:aws:logs:*:*:log-group:cycloid-ci-workers_prod:*"
        -
          PolicyName:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - !Ref EnvironmentTag
                - 'cw-logs'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:ListTagsLogGroup"
                  - "logs:DescribeSubscriptionFilters"
                  - "logs:DescribeMetricFilters"
                  - "logs:DescribeLogStreams"
                  - "logs:DescribeLogGroups"
                  - "logs:TestMetricFilter"
                  - "logs:DescribeResourcePolicies"
                  - "logs:DescribeExportTasks"
                  - "logs:DescribeDestinations"
                  - "logs:CreateLogGroup"
                Resource: "*"

  WorkersInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName:
        Fn::Join:
          - '-'
          - - !Ref AWS::StackName
            - !Ref EnvironmentTag
            - 'instance-profile'
      Path: "/"
      Roles:
        - Ref: "WorkersRole"

  WorkersGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: Subnets
      LaunchConfigurationName:
        Fn::If:
          - EnabledSpotInstances
          - Ref: LaunchConfigSpotPrice
          - Ref: LaunchConfig
      DesiredCapacity:
        Ref: NumberOfWorkers
      MinSize:
        Fn::If:
          - EnabledSpotInstances
          - 0
          - Ref: NumberOfWorkers
      MaxSize: 1001
      Tags:
        - Key: "Name"
          Value:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - !Ref EnvironmentTag
          PropagateAtLaunch: true
        - Key: "role"
          Value:
            Ref: RoleTag
          PropagateAtLaunch: true
        - Key: "cycloid.io"
          Value: "true"
          PropagateAtLaunch: true
        - Key: "project"
          Value:
            Ref: AWS::StackName
          PropagateAtLaunch: true
        - Key: "customer"
          Value:
            Ref: OrganizationTag
          PropagateAtLaunch: true
        - Key: "organization"
          Value:
            Ref: OrganizationTag
          PropagateAtLaunch: true
        - Key: "env"
          Value:
            Ref: EnvironmentTag
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService:
          Fn::If:
            - EnabledSpotInstances
            - 0
            - 1
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: DisabledSpotInstances
    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - image
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      - Ref: MetricsSecurityGroup
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: "WorkersInstanceProfile"
      BlockDeviceMappings:
        - DeviceName: "/dev/xvdf"
          Ebs:
            VolumeSize:
              Ref: VolumeSize
            VolumeType: "gp2"
            DeleteOnTermination: "true"
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"

            - "export PROJECT="
            - Ref: AWS::StackName
            - "\n"

            - "export ENV="
            - Ref: EnvironmentTag
            - "\n"

            - "export ROLE="
            - Ref: RoleTag
            - "\n"

            - "export SCHEDULER_API_ADDRESS='"
            - Ref: SchedulerApiAddress
            - "'\n"

            - "export SCHEDULER_HOST="
            - Ref: SchedulerHost
            - "\n"

            - "export SCHEDULER_PORT="
            - Ref: SchedulerPort
            - "\n"

            - "export TSA_PUBLIC_KEY='"
            - Ref: TsaPublicKey
            - "'\n"

            - "export WORKER_KEY='"
            - Ref: WorkerKey
            - "'\n"

            - "export WORKER_RUNTIME='"
            - Ref: WorkerRuntime
            - "'\n"

            - "export WORKER_DNS_SERVER="
            - Ref: WorkerDnsDerver
            - "\n"

            - "export TEAM_ID="
            - Ref: TeamId
            - "\n"

            - "export STACK_BRANCH="
            - Ref: StackBranch
            - "\n"

            - "export VERSION="
            - Ref: WorkerVersion
            - "\n"

            - "export DEBUG="
            - Ref: DebugMode
            - "\n"

            - |
              export LOG_FILE="/var/log/user-data.log"
              exec &> >(tee -a ${LOG_FILE})

              # Run the startup installation script.
              # The $RANDOM variable is here used to avoid remote network caching.
              curl -sSL "https://raw.githubusercontent.com/cycloid-community-catalog/stack-external-worker/${STACK_BRANCH}/extra/startup.sh?${RANDOM}" | bash -s aws

  LaunchConfigSpotPrice:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: EnabledSpotInstances
    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - image
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      - Ref: MetricsSecurityGroup
      InstanceType:
        Ref: InstanceType
      SpotPrice:
        Ref: InstanceSpotPrice
      IamInstanceProfile:
        Ref: "WorkersInstanceProfile"
      BlockDeviceMappings:
        - DeviceName: "/dev/xvdf"
          Ebs:
            VolumeSize:
              Ref: VolumeSize
            VolumeType: "gp2"
            DeleteOnTermination: "true"
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"

            - "export PROJECT="
            - Ref: AWS::StackName
            - "\n"

            - "export ENV="
            - Ref: EnvironmentTag
            - "\n"

            - "export ROLE="
            - Ref: RoleTag
            - "\n"

            - "export SCHEDULER_API_ADDRESS='"
            - Ref: SchedulerApiAddress
            - "'\n"

            - "export SCHEDULER_HOST="
            - Ref: SchedulerHost
            - "\n"

            - "export SCHEDULER_PORT="
            - Ref: SchedulerPort
            - "\n"

            - "export TSA_PUBLIC_KEY='"
            - Ref: TsaPublicKey
            - "'\n"

            - "export WORKER_KEY='"
            - Ref: WorkerKey
            - "'\n"

            - "export WORKER_RUNTIME='"
            - Ref: WorkerRuntime
            - "'\n"

            - "export WORKER_DNS_SERVER="
            - Ref: WorkerDnsDerver
            - "\n"

            - "export TEAM_ID="
            - Ref: TeamId
            - "\n"

            - "export STACK_BRANCH="
            - Ref: StackBranch
            - "\n"

            - "export VERSION="
            - Ref: WorkerVersion
            - "\n"

            - "export DEBUG="
            - Ref: DebugMode
            - "\n"

            - |
              export LOG_FILE="/var/log/user-data.log"
              exec &> >(tee -a ${LOG_FILE})

              # Run the startup installation script.
              # The $RANDOM variable is here used to avoid remote network caching.
              curl -sSL "https://raw.githubusercontent.com/cycloid-community-catalog/stack-external-worker/${STACK_BRANCH}/extra/startup.sh?${RANDOM}" | bash -s aws

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Worker core security group
#      SecurityGroupIngress:
#      - IpProtocol: tcp
#        FromPort: '22'
#        ToPort: '22'
#        SourceSecurityGroupId:
#          Ref: SSHSecurityGroup
      VpcId:
        Ref: VpcId
      Tags:
        - Key: "Name"
          Value:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - !Ref EnvironmentTag
                - 'instance-sg'
        - Key: "cycloid.io"
          Value: "true"
        - Key: "project"
          Value:
            Ref: AWS::StackName
        - Key: "customer"
          Value:
            Ref: OrganizationTag
        - Key: "organization"
          Value:
            Ref: OrganizationTag
        - Key: "env"
          Value:
            Ref: EnvironmentTag

  # If a SSHSecurity group is provided
  InstanceSecurityGroupSSHRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref SSHSecurityGroup
      GroupId: !GetAtt InstanceSecurityGroup.GroupId

  MetricsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow metrics server to collect metrics
      VpcId:
        Ref: VpcId
      Tags:
        - Key: "Name"
          Value:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - !Ref EnvironmentTag
                - 'metrics-sg'
        - Key: "cycloid.io"
          Value: "true"
        - Key: "project"
          Value:
            Ref: AWS::StackName
        - Key: "customer"
          Value:
            Ref: OrganizationTag
        - Key: "organization"
          Value:
            Ref: OrganizationTag
        - Key: "env"
          Value:
            Ref: EnvironmentTag

  # If a Metrics security group  group is provided
  MetricsSecurityGroupRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 9100
      ToPort: 9100
      SourceSecurityGroupId: !Ref MetricsSecGroup
      GroupId: !GetAtt MetricsSecurityGroup.GroupId

  ScheduledWorkersStop:
    Type: AWS::AutoScaling::ScheduledAction
    Condition: EnabledScheduling
    Properties:
      AutoScalingGroupName:
        Ref: WorkersGroup
      MaxSize: 0
      MinSize: 0
      DesiredCapacity: 0
      Recurrence:
        Ref: ScheduledWorkersStopRecurrence
  ScheduledWorkersStart:
    Type: AWS::AutoScaling::ScheduledAction
    Condition: EnabledScheduling
    Properties:
      AutoScalingGroupName:
        Ref: WorkersGroup
      MaxSize: 1001
      DesiredCapacity:
        Ref: NumberOfWorkers
      MinSize:
        Fn::If:
          - EnabledSpotInstances
          - 0
          - Ref: NumberOfWorkers
      Recurrence:
        Ref: ScheduledWorkersStartRecurrence
