{
  "variables": {
    "exposed_team": "{{env `BUILD_TEAM_NAME`}}",
    "customer": "{{env `customer`}}",
    "project": "{{env `project`}}",
    "env": "{{env `env`}}",
    "role": "{{env `role`}}",
    "ansible_version": "{{env `ansible_version`}}",
    "inventory_groups": "{{env `inventory_groups`}}",
    "skip_tags": "{{env `skip_tags`}}",
    "public_key": "{{env `public_key`}}",
    "install_user": "admin",
    "install_user_home": "/home/admin"
  },
  "builders": [
    {
      "type": "amazon-ebs",
      "region": "{{ user `aws_region`}}",
      "source_ami_filter": {
        "filters": {
          "architecture": "x86_64",
          "virtualization-type": "hvm",
          "name": "*debian-stretch-*",
          "root-device-type": "ebs"
        },
        "owners": [
          "379101102735"
        ],
        "most_recent": true
      },
      "instance_type": "t2.nano",
      "ami_name": "{{user `project`}}_{{user `role`}}_{{user `env`}}_{{timestamp}}",
      "ssh_username": "{{user `install_user`}}",
      "run_tags": {
        "customer": "{{user `customer`}}",
        "project": "{{user `project`}}",
        "env": "{{user `env`}}",
        "role": "{{user `role`}}",
        "cycloid.io": "true",
        "packer_build": "true",
        "monitoring-discovery": "false"
      },
      "tags": {
        "Name": "{{user `project`}}_{{user `role`}}_{{user `env`}}-{{timestamp}}",
        "customer": "{{user `customer`}}",
        "project": "{{user `project`}}",
        "env": "{{user `env`}}",
        "role": "{{user `role`}}",
        "cycloid.io": "true",
        "monitoring-discovery": "false"
      }
    }
  ],
  "provisioners": [
    {
      "type": "shell",
      "inline": [
        "echo 'Waiting for cloudinit to be done... Can take up to 300 sec'",
        "# Due to https://github.com/mitchellh/packer/issues/41 wait cloud init",
        "for i in $(seq 1 300); do [ -f /var/lib/cloud/instance/boot-finished ] && break || sleep 1; done",
        "echo '{{user `public_key`}}' > {{user `install_user_home`}}/.ssh/authorized_keys",
        "sudo apt-get update -qq > /dev/null",
        "sudo apt-get install -yqq build-essential libssl-dev libffi-dev python-dev python-setuptools git curl > /dev/null",
        "if command -v easy_install >/dev/null 2>&1; then sudo easy_install --quiet pip==20.3.4; else sudo apt-get install -yqq --no-install-recommends python-pip; fi",
        "sudo pip install -U cryptography",
        "sudo pip -q install ansible=={{user `ansible_version`}}",
        "echo 'Host *' >> {{user `install_user_home`}}/.ssh/config",
        "echo 'StrictHostKeyChecking no' >> {{user `install_user_home`}}/.ssh/config",
        "# wait aws role attach to the instance",
        "sleep 60"
      ]
    },
    {
      "type": "ansible-local",
      "command": "ANSIBLE_STDOUT_CALLBACK=actionable ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook",
      "playbook_file": "../packer.yml",
      "playbook_dir": "../",
      "extra_arguments": [
        "--diff",
        "-e 'customer={{user `customer`}}'",
        "-e 'project={{user `project`}}'",
        "-e 'env={{user `env`}}'",
        "-e 'role={{user `role`}}'"
      ],
      "inventory_groups": "{{user `inventory_groups`}}"
    },
    {
      "type": "ansible-local",
      "command": "ANSIBLE_STDOUT_CALLBACK=actionable ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook",
      "galaxy_file": "../requirements.yml",
      "playbook_file": "../external-worker.yml",
      "playbook_dir": "../",
      "staging_directory": "{{user `install_user_home`}}/{{user `project`}}",
      "extra_arguments": [
        "--diff",
        "-e 'customer={{user `customer`}}'",
        "-e 'project={{user `project`}}'",
        "-e 'env={{user `env`}}'",
        "-e 'role={{user `role`}}'",
        "-e 'concourse_exposed_team={{user `exposed_team`}}'",
        "-e 'ec2_tag_customer={{user `customer`}}'",
        "-e 'ec2_tag_project={{user `project`}}'",
        "-e 'ec2_tag_env={{user `env`}}'",
        "-e 'ec2_tag_role={{user `role`}}'",
        "--skip-tags='{{user `skip_tags`}}'"
      ],
      "inventory_groups": "{{user `inventory_groups`}}"
    }
  ]
}
