shared:

  # Task : sync and merge with rsync 2 rep. Used to merge stack and config
  - &merge-stack-and-config
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: cycloid/cycloid-toolkit
        tag: latest
#    run:
#      path: /usr/bin/merge-stack-and-config
    run:
      path: /bin/sh
      args:
      - -ec
      - |
        # add admin key on bastion to connect on future ec2 servers
        mkdir -p config/((project))/ansible/files/ssh/((customer))/
        echo "${BASTION_PRIVATE_KEY}" > config/((project))/ansible/files/ssh/((customer))/deploy
        /usr/bin/merge-stack-and-config
    outputs:
      - name: merged-stack
        path: "merged-stack"

  # Task : connect on the bastion server and run ansible from it
  - &run-ansible-from-bastion
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
      run:
        path: /usr/bin/ansible-runner
      caches:
        - path: ansible-playbook/roles
      inputs:
      - name: merged-stack
        path: ansible-playbook

groups:

- name: ((project))-((env))
  jobs:
  - terraform-plan
  - terraform-apply
  - deploy-bastion
- name: destroy
  jobs:
  - terraform-destroy

resource_types:

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: '0.12.28'

resources:

- name: tfstate
  type: terraform
  source:
    env_name: ((env))
    backend_type: s3
    backend_config:
      bucket: ((terraform_storage_bucket_name))
      key: ((project))-((env)).tfstate
      workspace_key_prefix: ((project))
      region: ((aws_default_region))
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
      aws_region: ((aws_default_region))
      env: ((env))
      customer: ((customer))
      project: ((project))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_default_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))



# The Ansible stack (will be merged with the config)
- name: git_stack-ansible
  type: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    paths:
      - ansible/*


# The Ansible config (will be merged with the stack)
- name: git_config-ansible
  type: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((project))/ansible/*


- name: git_stack-terraform
  type: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    paths:
    - terraform/*

- name: git_config-terraform
  type: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
    - ((project))/terraform/*

jobs:
  - name: terraform-plan
    serial: True
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack-terraform
          trigger: true
        - get: git_config-terraform
          trigger: true

        - task: merge-stack-and-config
          config:
            <<: *merge-stack-and-config
            inputs:
              - name: git_config-terraform
                path: "config"
              - name: git_stack-terraform
                path: "stack"
          params:
            CONFIG_PATH: ((project))/terraform/((env))
            STACK_PATH: terraform

        - put: tfstate
          params:
            plan_only: true
            terraform_source: merged-stack/

  - name: terraform-apply
    serial: True
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - do:
        # Get the PR on the project #
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan
        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan
        - get: tfstate
          trigger: false
          passed:
            - terraform-plan


        - task: merge-stack-and-config
          config:
            <<: *merge-stack-and-config
            inputs:
              - name: git_config-terraform
                path: "config"
              - name: git_stack-terraform
                path: "stack"
          params:
            CONFIG_PATH: ((project))/terraform/((env))
            STACK_PATH: terraform

        - put: tfstate
          params:
            plan_run: true
            terraform_source: merged-stack/


  - name: deploy-bastion
    build_logs_to_retain: 10
    plan:
    - do:
      - get: tfstate
        trigger: true
        passed:
          - terraform-apply
      - get: git_stack-ansible
        trigger: true
      - get: git_config-ansible
        trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: tfstate
            path: "terraform"
          - name: git_config-ansible
            path: "config"
          - name: git_stack-ansible
            path: "stack"
        params:
          CONFIG_PATH: ((project))/ansible
          STACK_PATH: ansible
          BASTION_PRIVATE_KEY: ((bastion_keypair))
  
      - task: run-ansible
        <<: *run-ansible-from-bastion
        params:
          BASTION_PRIVATE_KEY: ((bastion_keypair))
          ANSIBLE_VAULT_PASSWORD: ((ansible_vault_password))
          AWS_DEFAULT_REGION: ((aws_default_region))
          AWS_ACCESS_KEY_ID: ((aws_access_key))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: bastion.yml
          EC2_VPC_DESTINATION_VARIABLE: ip_address
          ANSIBLE_FORCE_GALAXY: false
          EXTRA_VARS:
            customer: ((customer))
            project: ((project))
            env: ((env))

  - name: terraform-destroy
    serial: True
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - do:
        # Get the PR on the project #
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-apply
        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-apply
        - get: tfstate
          trigger: false
          passed:
            - terraform-apply

        - task: merge-stack-and-config
          config:
            <<: *merge-stack-and-config
            inputs:
              - name: git_config-terraform
                path: "config"
              - name: git_stack-terraform
                path: "stack"
          params:
            CONFIG_PATH: ((project))/terraform/((env))
            STACK_PATH: terraform

        - put: tfstate
          params:
            action: destroy
            terraform_source: merged-stack/
          get_params:
            action: destroy
