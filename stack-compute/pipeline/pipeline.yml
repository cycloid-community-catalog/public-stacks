# YAML anchors
shared:
  # Task : sync and merge with rsync 2 rep. Used to merge stack and config
  - &merge-stack-and-config
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: cycloid/cycloid-toolkit
        tag: latest
    run:
      path: /usr/bin/merge-stack-and-config
    outputs:
    - name: merged-stack
      path: "merged-stack"

# define stack_path depending of the usecase
($- $stack_path := "" $)
($- if eq .use_case "aws-ec2" $)
  ($- $stack_path = "aws" $)
($- else if eq .use_case "azure-linux" $)
  ($- $stack_path = "azure" $)
($- else if eq .use_case "gcp-gce" $)
  ($- $stack_path = "gcp" $)
($- end $)

groups:
- name: overview
  jobs:
  - terraform-plan
  - terraform-apply

- name: destroy
  jobs:
  - terraform-destroy

resource_types:
- name: terraform
  type: registry-image
  source:
    repository: cycloid/terraform-resource
    tag: "1.11.1"

resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ($ .environment $)
    backend_type: http
    backend_config:
      address: '($ .api_url $)/inventory?jwt=($ .inventory_jwt $)'
      skip_cert_verification: true
    vars:
      env: ($ .environment $)
      project: ($ .project $)
      organization: ($ .organization $)
      component: ($ .component $)
      ($- if eq .use_case "aws-ec2" $)
      aws_cred: ((aws_cred))
      aws_region: ((aws_default_region))
      ($- else if eq .use_case "gcp-gce" $)
      gcp_project: ((gcp_project))
      gcp_region: "((gcp_region))"
      gcp_zone: ((gcp_zone))
      ($- else if eq .use_case "azure-linux" $)
      azure_location: "((azure_location))"
      azure_env: "((azure_env))"
      os_admin_password: "((os_admin_password))"
      azure_cred: ((azure_cred))
      ($- end $)
    ($- if eq .use_case "gcp-gce" $)
    env:
      GOOGLE_PROJECT: ((gcp_project))
      GOOGLE_REGION: "((gcp_region))"
      GOOGLE_ZONE: ((gcp_zone))
      GOOGLE_CREDENTIALS: ((gcp_credentials_json))
    ($- end $)

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: git
  source:
    uri: "https://github.com/cycloid-community-catalog/stack-compute.git"
    branch: ($ .catalog_repository_branch $)
    paths:
      - terraform/($ $stack_path $)/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: git
  source:
    uri: ($ .config_repository_url $)
    branch: ($ .config_repository_branch $)
    ($- if eq .config_repository_credential_type "basic_auth" $)
    username: ((($ .config_repository_credential_path $).username))
    password: ((($ .config_repository_credential_path $).password))
    ($- else $)
    private_key: ((($ .config_repository_credential_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .config_root $)/terraform/*

jobs:
# Merge and trigger a plan whenever there is a commit in Terraform stack or config
- name: terraform-plan
  serial: True
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - do:
    - get: git_stack-terraform
      trigger: true
    - get: git_config-terraform
      trigger: true

    - task: merge-stack-and-config
      config:
        <<: *merge-stack-and-config
        inputs:
        - name: git_config-terraform
          path: "config"
        - name: git_stack-terraform
          path: "stack"
      params:
        CONFIG_PATH: ($ .config_root $)/terraform/
        STACK_PATH: terraform/($ $stack_path $)

    - put: tfstate
      params:
        plan_only: true
        terraform_source: merged-stack/

# Merge and trigger an apply manually (no autostart of this job)
- name: terraform-apply
  serial: True
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - do:
    - get: git_stack-terraform
      trigger: false
      passed:
      - terraform-plan
    - get: git_config-terraform
      trigger: false
      passed:
      - terraform-plan
    - get: tfstate
      trigger: false
      passed:
      - terraform-plan

    - task: merge-stack-and-config
      config:
        <<: *merge-stack-and-config
        inputs:
        - name: git_config-terraform
          path: "config"
        - name: git_stack-terraform
          path: "stack"
      params:
        CONFIG_PATH: ($ .config_root $)/terraform/
        STACK_PATH: terraform/($ $stack_path $)

    - put: tfstate
      params:
        plan_run: true
        terraform_source: merged-stack/

- name: terraform-destroy
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - do:
    - get: git_stack-terraform
      trigger: false
    - get: git_config-terraform
      trigger: false
    - task: merge-stack-and-config
      config:
        <<: *merge-stack-and-config
        inputs:
        - name: git_config-terraform
          path: "config"
        - name: git_stack-terraform
          path: "stack"
      params:
        CONFIG_PATH: ($ .config_root $)/terraform/
        STACK_PATH: terraform/($ $stack_path $)

    - put: tfstate
      params:
        action: destroy
        terraform_source: merged-stack/
      get_params:
        action: destroy
