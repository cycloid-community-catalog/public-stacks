# YAML anchors
shared:

  # Task : sync and merge with rsync 2 rep. Used to merge stack and config
  - &merge-stack-and-config
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: cycloid/cycloid-toolkit
        tag: latest
    run:
      path: /usr/bin/merge-stack-and-config
    outputs:
    - name: merged-stack
      path: "merged-stack"

# define stack_path depending of the usecase
($- $stack_path := "" $)
($- if eq .use_case "aws-ec2" $)
  ($- $stack_path = "aws" $)
($- else if eq .use_case "azure-linux" $)
  ($- $stack_path = "azure" $)
($- else if eq .use_case "gcp-gce" $)
  ($- $stack_path = "gcp" $)
($- end $)

groups:

- name: overview
  jobs:
  - terraform-plan
  - terraform-apply

- name: destroy
  jobs:
  - terraform-destroy

resource_types:

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: ((terraform_version))

resources:

- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ($ .environment $)
($- if eq .use_case "aws-ec2" $)
    backend_type: s3
    backend_config:
      bucket: ((terraform_storage_bucket_name))
      key: ($ .project $)-($ .environment $).tfstate
      workspace_key_prefix: ($ .project $)
      region: ((aws_default_region))
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
      aws_region: ((aws_default_region))
      env: ($ .environment $)
      project: ($ .project $)
      customer: ($ .organization_canonical $)
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_default_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
($- else if eq .use_case "azure-linux" $)
    backend_type: azurerm
    backend_config:
      container_name: ((terraform_storage_container_name))
      key: ((terraform_storage_container_path))/((project))-((env)).tfstate
      resource_group_name: ((terraform_resource_group_name))
      storage_account_name: ((terraform_storage_account_name))
      access_key: ((terraform_storage_access_key))
    vars:
      azure_location: ((azure_location))
      azure_env: ((azure_env))
      azure_client_id: ((azure_client_id))
      azure_client_secret: ((azure_client_secret))
      azure_subscription_id: ((azure_subscription_id))
      azure_tenant_id: ((azure_tenant_id))
      os_admin_password: ((os_admin_password))
      env: ($ .environment $)
      project: ($ .project $)
      customer: ($ .organization_canonical $)
    env:
      ARM_CLIENT_ID: ((azure_client_id))
    	ARM_CLIENT_SECRET: ((azure_client_secret))
    	ARM_TENANT_ID: ((azure_tenant_id))
    	ARM_SUBSCRIPTION_ID: ((azure_subscription_id))
($- else if eq .use_case "gcp-gce" $)
    backend_type: gcs
    backend_config:
      bucket: ((terraform_storage_bucket_name))
      prefix: ((project))/((env))
      credentials: ((gcp_credentials_json))
    vars:
      gcp_project: ((gcp_project))
      gcp_region: ((gcp_region))
      env: ($ .environment $)
      project: ($ .project $)
      customer: ($ .organization_canonical $)
    env:
      GOOGLE_PROJECT: ((gcp_project))
      GOOGLE_REGION: ((gcp_region))
      GOOGLE_ZONE: ((gcp_zone))
      GOOGLE_CREDENTIALS: ((gcp_credentials_json))
($- end $)

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: git
  source:
    uri: https://github.com/cycloid-community-catalog/stack-compute.git
    branch: ($ .scs_branch $)
    paths:
      - terraform/($ $stack_path $)/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: git
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
    ($- if eq .cr_cred_type "basic_auth" $)
    username: ((($ .cr_cred_path $).username))
    password: ((($ .cr_cred_path $).password))
    ($- else $)
    private_key: ((($ .cr_cred_path $).ssh_key))
    ($- end $)
    paths:
      - ($ .project $)/terraform/($ .environment $)/*

jobs:

# Merge and trigger a plan whenever there is a commit in Terraform stack or config
- name: terraform-plan
  serial: True
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: git_stack-terraform
        trigger: true
      - get: git_config-terraform
        trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ($ .project $)/terraform/($ .environment $)
          STACK_PATH: terraform/($ $stack_path $)

      - put: tfstate
        params:
          plan_only: true
          terraform_source: merged-stack/

# Merge and trigger an apply manually (no autostart of this job)
- name: terraform-apply
  serial: True
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: git_stack-terraform
        trigger: false
        passed:
          - terraform-plan
      - get: git_config-terraform
        trigger: false
        passed:
          - terraform-plan
      - get: tfstate
        trigger: false
        passed:
          - terraform-plan

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ($ .project $)/terraform/($ .environment $)
          STACK_PATH: terraform/($ $stack_path $)

      - put: tfstate
        params:
          plan_run: true
          terraform_source: merged-stack/

- name: terraform-destroy
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
        - get: git_stack-terraform
          trigger: false
        - get: git_config-terraform
          trigger: false
        - task: merge-stack-and-config
          config:
            <<: *merge-stack-and-config
            inputs:
            - name: git_config-terraform
              path: "config"
            - name: git_stack-terraform
              path: "stack"
          params:
            CONFIG_PATH: ($ .project $)/terraform/($ .environment $)
            STACK_PATH: terraform/($ $stack_path $)

        - put: tfstate
          params:
            action: destroy
            terraform_source: merged-stack/
          get_params:
            action: destroy
