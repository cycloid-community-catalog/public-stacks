module "vm" {
  #####################################
  # Do not modify the following lines #
  source = "./module-ec2"

  project  = var.project
  env      = var.env
  customer = var.customer

  ##################################### 

  ###
  # AMI data
  ###

  #. ami_most_recent (optional, bool):
  #+ If more than one result is returned, use the most recent AMI
  ami_most_recent = true

  #. ami_name (required, string):
  #+ The name of the AMI.
  ami_name = "debian-stretch-*"

  #. ami_virtualisation_type (optional, string):
  #+ The AMI virtualization type.
  ami_virtualisation_type = "hvm"

  #. ami_architecture (optional, string):
  #+ The AMI image architecture.
  ami_architecture = "x86_64"

  #. ami_root_device_type (optional, string):
  #+ The AMI type of the root device volume.
  ami_root_device_type = "ebs"

  #. ami_owners (required, string):
  #+ List of AMI owners to limit search.
  ami_owners = "379101102735" # DEBIAN

  ###
  # Cloud init template
  ###
  #. file_content (optional, string):
  #+ The content of the file to use if cloud init is used.
  file_content = ""
  
  ###
  # Security Group
  ###

  #. sg_name (optional, string):
  #+ Name of the security group.
  sg_name = ""

  #. vpc_id (required, string):
  #+ VPC ID used to create the security group.
  vpc_id = ""

  #. sg_ingress_rules (optional, array):
  #+ Configuration block for ingress rules.
  sg_ingress_rules = []

  #. sg_egress_rules (optional, array):
  #+ Configuration block for egress rules.
  sg_egress_rules =  [
      {
        description      = "Accept all egress"
        from_port        = 0
        to_port          = 0
        protocol         = "-1"
        cidr_blocks      = ["0.0.0.0/0"]
        ipv6_cidr_blocks = []
        prefix_list_ids  = []
        security_groups  = []
        self             = true
        }
    ]

  #. sg_extra_tags (optional):
  #+ Map of extra tags to assign to the security group.
  sg_extra_tags = {}

  ###
  # EC2
  ###

  #. instance_type (required, string):
  #+ The instance type to use for the instance. "
  instance_type = "t2.micro"
  
  #. instance_extra_tags (optional):
  #+ A map of tags to assign to the resource.
  instance_extra_tags =  {}

  ## EC2-Network

  #. subnet_id (required, string):
  #+ VPC Subnet ID to launch in.
  subnet_id = ""

  #. private_ip (optional, string):
  #+ Private IP address to associate with the instance in a VPC.
  private_ip = ""

  #. associate_public_ip_address (optional, boolean):
  #+ Whether to associate a public IP address with an instance in a VPC.
  associate_public_ip_address = true
  
  ## EC2-Storage

  #.enable_vm_disk_delete_on_termination (optional, boolean):
  #+ Whether the volume should be destroyed on instance termination.
  enable_vm_disk_delete_on_termination = true

  #. enable_vm_disk_encrypted (optional, boolean):
  #+ Whether to enable volume encryption.
  enable_vm_disk_encrypted = false

  #. vm_disk_size (optional, integer): 
  #+ Size of the root volume in gibibytes (GiB).
  vm_disk_size = 5

  #. vm_disk_type (optional, string):
  #+ Type of the root volume.
  vm_disk_type = "gp2"

  #. ebs_optimized (optional, bool):
  #+ If true, the launched EC2 instance will be EBS-optimized.
  ebs_optimized = false
  
  #. volume_extra_tags (optional):
  #+ A map of tags to assign, at instance-creation time, to root and EBS volumes.
  volume_extra_tags = {}
}

### Extra resources to add if needed!

## 1 - Attach extra storage to the VM
## Please copy the next section of code into a separate .tf file in the config branch of your stack
## NOTE! Check the comments to know more about the available options

# a) Creates an extra EBS volume
# resource "aws_ebs_volume" "extra_volume" {
#   availability_zone    = us-west-2a   #(Required) The AZ where the EB will exist.
#   encrypted            = true         #(Optional) If true, the disk will be encrypted.
#   size                 = 5            #(Optional) The size of the drive in GiBs.
#   type                 = "gp2"        #(Optional) The type of EBS volume. Can be standard, gp2, gp3, io1, io2, sc1 or st1 (Default: gp2).
#   tags                 = {}           #(Optional) A map of tags to assign to the resource. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level.
##  snapshot_id  #(Optional) A snapshot to base the EBS volume off of.
# }

## b) Attaches it to the ec2 instance created
# resource "aws_volume_attachment" "ebs_att" {
#   device_name  = /dev/xvda                  #(Required) The device name to expose to the instance (for example, /dev/sdh or xvdh). See Device Naming on Linux Instances and Device Naming on Windows Instances for more information.
#   volume_id    = aws_ebs_volume.volume.id   #(Required) ID of the Instance to attach to
#   instance_id  = module.vm.instance_id      #(Required) ID of the Volume to be attached
#   force_detach = false                      #(Optional, Boolean) Set to true if you want to force the volume to detach. Useful if previous attempts failed, but use this option only as a last resort, as this can result in data loss.
#   skip_destroy = false                      #(Optional, Boolean) Set this to true if you do not wish to detach the volume from the instance to which it is attached at destroy time, and instead just remove the attachment from Terraform state. This is useful when destroying an instance which has volumes created by some other means attached.
# }