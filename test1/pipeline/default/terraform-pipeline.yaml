# YAML anchors
shared:
  # Task : sync and merge with rsync 2 rep. Used to merge stack and config
  - &task-merge-stack-and-config
    task: merge-stack-and-config
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: latest
      run:
        path: /usr/bin/merge-stack-and-config
      inputs:
        - name: git_config-terraform
          path: "config"
        - name: git_stack-terraform
          path: "stack"
      outputs:
        - name: merged-stack
          path: "merged-stack"
    params:
      CONFIG_PATH: ((project))/terraform/((env))
      STACK_PATH: ((sc_path))/terraform/default

groups:
- name: overview
  jobs:
  - terraform-plan
  - terraform-apply

- name: destroy
  jobs:
  - terraform-destroy

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: ((terraform_version))

resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ((env))
    backend_type: s3
    backend_config:
      bucket: ((terraform_storage_bucket_name))
      key: ((project))-((env)).tfstate
      workspace_key_prefix: ((project))
      region: ((aws_default_region))
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      env: ((env))
      customer: ((customer))
      organization: ((organization))
      project: ((project))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_default_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  icon: github-circle
  type: git
  source:
    uri: ((sc_repository))
    branch: ((sc_branch))
    private_key: ((sc_git_key))
    paths:
      - ((sc_path))/terraform/default/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: github-circle
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((project))/terraform/((env))/*

jobs:
# Merge and trigger a plan whenever there is a commit in Terraform stack or config
- name: terraform-plan
  serial: True
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: git_stack-terraform
        trigger: true
      - get: git_config-terraform
        trigger: true
      - *task-merge-stack-and-config
      - put: tfstate
        params:
          plan_only: true
          terraform_source: merged-stack/

# Merge and trigger an apply manually (no autostart of this job)
- name: terraform-apply
  serial: True
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: git_stack-terraform
        trigger: false
        passed:
          - terraform-plan
      - get: git_config-terraform
        trigger: false
        passed:
          - terraform-plan
      - get: tfstate
        trigger: false
        passed:
          - terraform-plan
      - *task-merge-stack-and-config
      - put: tfstate
        params:
          plan_run: true
          terraform_source: merged-stack/

# Merge and trigger a destroy of the stack (no autostart of this job)
- name: terraform-destroy
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
        - get: git_stack-terraform
          trigger: false
        - get: git_config-terraform
          trigger: false
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            action: destroy
            terraform_source: merged-stack/
          get_params:
            action: destroy

